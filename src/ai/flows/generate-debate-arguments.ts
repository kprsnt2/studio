// This is an autogenerated file from Firebase Genkit.
'use server';
/**
 * @fileOverview AI powered debate argument generation for a given topic.
 *
 * - generateDebateArguments - A function that handles the debate argument generation.
 * - GenerateDebateArgumentsInput - The input type for the generateDebateArguments function.
 * - GenerateDebateArgumentsOutput - The return type for the generateDebateArguments function.
 */

import {ai} from '@/ai/ai-instance';
import {z} from 'genkit';

const GenerateDebateArgumentsInputSchema = z.object({
  topic: z.string().describe('The topic for which to generate debate arguments.'),
  stance: z.enum(['pro', 'con']).describe('The stance or side of the argument (pro or con).'),
});
export type GenerateDebateArgumentsInput = z.infer<typeof GenerateDebateArgumentsInputSchema>;

const GenerateDebateArgumentsOutputSchema = z.object({
  arguments: z.array(z.string()).describe('An array of arguments for the given topic and stance.'),
});
export type GenerateDebateArgumentsOutput = z.infer<typeof GenerateDebateArgumentsOutputSchema>;

export async function generateDebateArguments(input: GenerateDebateArgumentsInput): Promise<GenerateDebateArgumentsOutput> {
  return generateDebateArgumentsFlow(input);
}

const generateDebateArgumentsPrompt = ai.definePrompt({
  name: 'generateDebateArgumentsPrompt',
  input: {
    schema: z.object({
      topic: z.string().describe('The topic for which to generate debate arguments.'),
      stance: z.enum(['pro', 'con']).describe('The stance or side of the argument (pro or con).'),
    }),
  },
  output: {
    schema: z.object({
      arguments: z.array(z.string()).describe('An array of arguments for the given topic and stance.'),
    }),
  },
  prompt: `You are a skilled debater. Generate a list of compelling arguments for the following debate topic, from the following stance:

Topic: {{{topic}}}
Stance: {{{stance}}}

Arguments (one argument per line):
`,
});

const generateDebateArgumentsFlow = ai.defineFlow<
  typeof GenerateDebateArgumentsInputSchema,
  typeof GenerateDebateArgumentsOutputSchema
>({
  name: 'generateDebateArgumentsFlow',
  inputSchema: GenerateDebateArgumentsInputSchema,
  outputSchema: GenerateDebateArgumentsOutputSchema,
},
async input => {
  const {output} = await generateDebateArgumentsPrompt(input);
  return output!;
});
